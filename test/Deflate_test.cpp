#include <boost/test/unit_test.hpp>

#include "../src/cryptors/Cryptor.h"

BOOST_AUTO_TEST_CASE(EncryptDeflate) {

  auto cryptor = Cryptor::cryptor_factory(
    "-e",
    "Deflate",
    "AAAAABBAAACCCCAAAAAAACCCCBBBBBBBDDAAAABBBBB"
  );

  const auto in_msg = cryptor->get_in_message();

  BOOST_CHECK_EQUAL(in_msg, "AAAAABBAAACCCCAAAAAAACCCCBBBBBBBDDAAAABBBBB");

  cryptor->run();

  const auto out_msg = cryptor->get_out_message();

  BOOST_CHECK_EQUAL(out_msg, "0000101100101100000000110011000100000011001100110000001100110100000000010011011000000010010000010000100101000010000011000100001100000100010001000000001001011011000000110101110100000011000000000010100000001111111111111111110001100111010111100110100110001100110010111101110110101010101010010001001100011101110101111011101101010");
}

BOOST_AUTO_TEST_CASE(DecryptDeflate) {

  auto cryptor = Cryptor::cryptor_factory(
    "-d",
    "Deflate",
    "0000101100101100000000110011000100000011001100110000001100110100000000010011011000000010010000010000100101000010000011000100001100000100010001000000001001011011000000110101110100000011000000000010100000001111111111111111110001100111010111100110100110001100110010111101110110101010101010010001001100011101110101111011101101010"
  );

  const auto in_msg = cryptor->get_in_message();

  BOOST_CHECK_EQUAL(in_msg, "0000101100101100000000110011000100000011001100110000001100110100000000010011011000000010010000010000100101000010000011000100001100000100010001000000001001011011000000110101110100000011000000000010100000001111111111111111110001100111010111100110100110001100110010111101110110101010101010010001001100011101110101111011101101010");

  cryptor->run();

  const auto out_msg = cryptor->get_out_message();

  BOOST_CHECK_EQUAL(out_msg, "AAAAABBAAACCCCAAAAAAACCCCBBBBBBBDDAAAABBBBB");
}